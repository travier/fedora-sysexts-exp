name: "Build and publish a sysext"
description: "Build and publish a systemd system extension under a versioned release"
inputs:
  sysext:
    description: "The sysext to build"
    required: true
  image:
    description: "The image to use as a base for the sysext"
    required: true

runs:
  using: "composite"
  steps:
    - name: "Build sysext"
      env:
        SYSEXT: ${{ inputs.sysext }}
        IMAGE: ${{ inputs.image }}
        PR: ${{ github.event_name == 'pull_request' }}
      shell: bash
      run: |
        set -euxo pipefail

        cd "${SYSEXT}"
        if [[ "${PR}" == "true" ]]; then
            diff="$(git diff origin/main HEAD --stat -- . ; git diff origin/main HEAD --stat -- ../sysext.just)"
            if [[ -z "${diff}" ]]; then
                echo "Skipping: No changes for this sysext in this PR"
                exit 0
            fi
        fi

        just build ${IMAGE}

    - name: "Publish sysext"
      env:
        SYSEXT: ${{ inputs.sysext }}
        GH_TOKEN: ${{ github.token }}
      if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
      shell: bash
      run: |
        set -euxo pipefail

        git config --global --add safe.directory "${PWD}"

        # Redefine grep to not fail when there are no matches
        grep() {
          /usr/bin/grep "$@" || test $? = 1
        }

        cd "${SYSEXT}"
        sha256sum *.raw > SHA256SUMS

        arch="$(uname --machine)"
        if [[ "${arch}" == "x86_64" ]]; then
            arch="x86-64"
        else
            arch="aarch64"
        fi

        # FIXME
        VERSION_ID="41"

        VERSION="$(cat ./version)"

        echo "Updating release for this sysext"
        new="$(cat digest inputs scripts | sha256sum)"

        old=""
        release="$(
          gh release list --json tagName \
            | jq -r '.[].tagName' \
            | grep "^${SYSEXT}-${VERSION_ID}-${VERSION}-${arch}$"
        )"
        if [[ -n "${release}" ]]; then
          echo "Fetching info from existing release: ${release}"
          curl --location --output digest.old  "https://github.com/travier/fedora-sysexts-exp/releases/download/${release}/digest"
          curl --location --output inputs.old  "https://github.com/travier/fedora-sysexts-exp/releases/download/${release}/inputs"
          curl --location --output scripts.old "https://github.com/travier/fedora-sysexts-exp/releases/download/${release}/scripts"
          old="$(cat digest.old inputs.old scripts.old | sha256sum)"
        fi

        if [[ "${new}" == "${old}" ]]; then
          echo "No changes in inputs since last release. Skipping."
        else
          echo "Creating new release for: ${SYSEXT}-${VERSION_ID}-${VERSION}-${arch}"

          {
          echo "Release:"
          echo "\`\`\`"
          cat ./SHA256SUMS
          echo "\`\`\`"
          echo ""
          echo "Built using container image:"
          echo "\`\`\`"
          cat ./digest
          echo "\`\`\`"
          echo ""
          echo "Built using input files:"
          echo "\`\`\`"
          cat ./inputs
          echo "\`\`\`"
          echo ""
          echo "Built using scripts:"
          echo "\`\`\`"
          cat ./scripts
          echo "\`\`\`"
          } > notes

          gh release delete \
            --cleanup-tag \
            --yes \
            "${SYSEXT}-${VERSION_ID}-${VERSION}-${arch}" \
            || true

          gh release create \
            --title "${SYSEXT} ${VERSION} for Fedora ${VERSION_ID} (${arch})" \
            --notes-file notes \
            "${SYSEXT}-${VERSION_ID}-${VERSION}-${arch}" \
            --latest=false \
            ./*.raw ./SHA256SUMS ./inputs ./scripts ./digest
        fi
