name: "Gather all version for a given sysext"
description: "Publish a release that references all available versions for a sysext"
inputs:
  sysext:
    description: "The sysext to generate the release for"
    required: true

# This composite action needs the RELEASEURL environment variables to be set at
# the workflow level

runs:
  using: "composite"
  steps:
    - name: "Publish release"
      env:
        GH_TOKEN: ${{ github.token }}
        SYSEXTS: ${{ inputs.sysexts }}
      if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
      shell: bash
      run: |
        set -euxo pipefail

        rm -f SHA256SUMS*

        TAGNAME="latest"
        releases=(
          $(
            gh release list --limit 1000 --json tagName \
              | jq --arg TAGNAME "${TAGNAME}" --raw-output '
                map(
                  select(.tagName != $TAGNAME)
                )
                | .[].tagName
              ' \
              | sort -h
          )
        )
        echo "Looking at releases: ${releases[@]}"
        for rel in ${releases[@]}; do
          echo "Fetching SHA256SUMS for release: ${rel}"
          curl --location --output "SHA256SUMS.${rel}" "${RELEASEURL}/${rel}/SHA256SUMS"
        done
        ls ./SHA256SUMS.* | sort -h | xargs cat > SHA256SUMS
        new="$(cat SHA256SUMS | sha256sum)"

        old=""
        release="$(
          gh release list --limit 1000 --json tagName \
            | jq --arg TAGNAME "${TAGNAME}" --raw-output '
              map(
                select(.tagName == $TAGNAME)
              )
              | .[].tagName
            '
        )"
        if [[ -n "${release}" ]]; then
          echo "Fetching SHA256SUMS from existing release: ${TAGNAME}"
          curl --location --output SHA256SUMS.old "${RELEASEURL}/${TAGNAME}/SHA256SUMS"
          old="$(cat SHA256SUMS.old | sha256sum)"
        fi

        if [[ "${new}" == "${old}" ]]; then
          echo "No changes for ${TAGNAME} since last release. Skipping."
        else
          echo "Creating new release: ${TAGNAME}"

          for s in $(echo ${SYSEXTS} | tr ';' ' '); do
            sed "s/%%SYSEXT%%/${s}/g" .workflow-templates/systemd-sysupdate.conf > ${s}.conf
          done

          {
          echo "Releases available:"
          echo "\`\`\`"
          cat ./SHA256SUMS
          echo "\`\`\`"
          } > notes

          gh release delete \
            --cleanup-tag \
            --yes \
            "${TAGNAME}" \
            || true

          gh release create \
            --title "System extensions for Fedora" \
            --notes-file notes \
            "${TAGNAME}" \
            --latest=true \
            ./SHA256SUMS ./*.conf
        fi
